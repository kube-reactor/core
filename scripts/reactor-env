#!/usr/bin/env bash
#
# Usage:
#
#  source reactor-env
#
#  > Requires: ${__script_dir}
#  > Optional: $SOURCED => [ 1, 0 ]
#
#=========================================================================================
# Initialization
#
export SOURCED=${1:-0}

export __user_id="$(id -u)"
export __user_name="$(id -nu)"
export __group_id="$(id -g)"
export __group_name="$(id -ng)"
export __docker_group_id="$(cut -d: -f3 < <(getent group docker))"
export __home_dir="/home/${__user_name}"

export __reactor_dir="$(dirname "${__script_dir}")"
export __reactor_version="$(cat -s "${__reactor_dir}/VERSION")"
export __log_file="reactor"

source "${__script_dir}/state/bootstrap.sh"

export __project_file="$(project_file "$(pwd)")"

if [ -z "${__project_file}" ]; then
  if [ $SOURCED -eq 1 ]; then
    return
  elif [ "${__command_name}" != "create" ]; then
    echo "Project directory with a 'reactor.yml' file does not exist in current or parent directories"
    exit 1
  fi
fi

export __project_dir="$(dirname "${__project_file}")"
export __environment="${REACTOR_ENV:-local}"
export __env_dir="${__project_dir}/env/${__environment}"

if [ -f /REACTOR.txt ]; then
  REACTOR_LOCAL=0
else
  REACTOR_LOCAL=1
fi
export REACTOR_LOCAL

# Load environment configuration
if [ -f "${__env_dir}/public.sh" ]; then
  source "${__env_dir}/public.sh"
fi
if [ -f "${__env_dir}/secret.sh" ]; then
  source "${__env_dir}/secret.sh"
fi

HOOK_UTILITIES="${__script_dir}/utilities/hooks.sh"
source "$HOOK_UTILITIES"

source "${__script_dir}/state/initialize.sh"

CLI_UTILITIES="${__script_dir}/utilities/cli.sh"
source "$CLI_UTILITIES"

DISK_UTILITIES="${__script_dir}/utilities/disk.sh"
source "$DISK_UTILITIES"

for file in "${__script_dir}/utilities"/*.sh; do
  if [[ "$file" != "$HOOK_UTILITIES" ]] \
    && [[ "$file" != "$CLI_UTILITIES" ]] \
    && [[ "$file" != "$DISK_UTILITIES" ]]; then
    source "$file"
  fi
done
load_library utilities

for file in "${__script_dir}/commands"/*.sh; do
  source "$file"
done
load_library commands
