#!/usr/bin/env bash
#
# Usage:
#
#  reactor [flags] <command> [args] [flags/options]
#
#=========================================================================================
# Initialization
#

# Initialize top level directories and load bootstrap functions
SCRIPT_PATH="${BASH_SOURCE[0]}" # bash
if [[ -z "$SCRIPT_PATH" ]]; then
  SCRIPT_PATH="${(%):-%N}" # zsh
fi

((return 0 2>/dev/null) || [[ $ZSH_EVAL_CONTEXT =~ :file$ ]]) && SOURCED=1 || SOURCED=0

export __script_dir="$(cd "$(dirname "${SCRIPT_PATH}")" && pwd)"
source "${__script_dir}/reactor-env"

if [[ $SOURCED -eq 1 ]]; then
  # script is being sourced
  return
fi


COMMAND_NAME="$1"
COMMAND_HOST_FUNCTION="${COMMAND_NAME}_host_command"
COMMAND_ARGS=()

while [[ $# -gt 0 ]]; do
  COMMAND_ARGS=("${COMMAND_ARGS[@]}" "$1")

  case "$1" in
    --verbose)
      arg_v=1
      shift
      ;;
    --debug)
      arg_d=1
      shift
      ;;
    --no-color)
      arg_n=1
      shift
      ;;
    *)
      shift
      ;;
  esac
done

#
#=========================================================================================
# Execution
#

# Error handling
set -o errexit
set -o errtrace
set -o nounset
set -o pipefail

# Log check
[[ "${LOG_LEVEL:-6}" ]] || emergency "Cannot continue without LOG_LEVEL"

# Debug mode
if [[ "${arg_d:-0}" = "1" ]]; then
  #set -o xtrace
  PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
  LOG_LEVEL="7"
  # Enable error backtracing
  trap '__err_report "${FUNCNAME:-.}" ${LINENO}' ERR
fi

# Verbose mode
if [[ "${arg_v:-0}" = "1" ]]; then
  set -o verbose
fi

# No color mode
if [[ "${arg_n:-0}" = "1" ]]; then
  NO_COLOR="true"
fi


echo "" >"$(logfile)"
debug "====================================================================="
debug "Executing reactor command: $@"

debug "Environment variables"
debug "======================================"
debug "$(env)"
debug "--------------------------------------"

if [[ "$__os" == "darwin" ]]; then
  REACTOR_DOCKER_SOCKET_FILE="${REACTOR_DOCKER_SOCKET_FILE:-/var/run/docker.sock.raw}"
  REACTOR_DOCKER_GROUP="0"
else
  REACTOR_DOCKER_SOCKET_FILE="${REACTOR_DOCKER_SOCKET_FILE:-/var/run/docker.sock}"
  REACTOR_DOCKER_GROUP="$(stat -L -c '%g' /var/run/docker.sock)"
fi
export REACTOR_DOCKER_SOCKET_FILE
export REACTOR_RUNTIME_IMAGE="${REACTOR_RUNTIME_IMAGE:-"${APP_NAME}:${__reactor_version}"}"

if [ -z ${REACTOR_DOCKER_RUN_ARGS+x} ]; then
  export REACTOR_DOCKER_RUN_ARGS=()
fi

REACTOR_ARGS=(
  "--rm"
  "--interactive"
  "--tty"
  "--network" "host"
  "--volume" "${REACTOR_DOCKER_SOCKET_FILE}:/var/run/docker.sock"
  "--volume" "${__reactor_dir}:/reactor"
  "--volume" "${__project_dir}:${__project_dir}"
  "--workdir" "${__project_dir}"
)
while IFS= read -r variable; do
  REACTOR_ARGS=("${REACTOR_ARGS[@]}" "--env" "$variable")
done <<< "$(env | grep -o "[_A-Za-z0-9]*")"

if [ -f "${__home_dir}/.bashrc" ]; then
  REACTOR_ARGS=("${REACTOR_ARGS[@]}" "--volume" "${__home_dir}/.bashrc:${__home_dir}/.bashrc")
fi
if [ -f "${__home_dir}/.bash_profile" ]; then
  REACTOR_ARGS=("${REACTOR_ARGS[@]}" "--volume" "${__home_dir}/.bash_profile:${__home_dir}/.bash_profile")
fi
if [ -f "${__home_dir}/.profile" ]; then
  REACTOR_ARGS=("${REACTOR_ARGS[@]}" "--volume" "${__home_dir}/.profile:${__home_dir}/.profile")
fi

if [ -d "${__home_dir}/.ssh" ]; then
  REACTOR_ARGS=("${REACTOR_ARGS[@]}" "--volume" "${__home_dir}/.ssh:${__home_dir}/.ssh")
fi
if [ -d "${__home_dir}/.git" ]; then
  REACTOR_ARGS=("${REACTOR_ARGS[@]}" "--volume" "${__home_dir}/.git:${__home_dir}/.git")
fi

if ! docker inspect "$REACTOR_RUNTIME_IMAGE" >/dev/null 2>&1; then
    "${__script_dir}/reactor-build"
    REACTOR_RUNTIME_IMAGE="${APP_NAME}:${__reactor_version}"
fi
REACTOR_ARGS=("${REACTOR_ARGS[@]}" "${REACTOR_DOCKER_RUN_ARGS[@]}" "$REACTOR_RUNTIME_IMAGE")

debug "Command Arguments: ${COMMAND_ARGS[@]}"
debug "Reactor Arguments: ${REACTOR_ARGS[@]}"

if [[ ${#COMMAND_ARGS[@]} -gt 0 ]] && [[ "${COMMAND_ARGS[0]}" == "enter" ]]; then
  info "Entering reactor environment ..."
  docker run --entrypoint bash "${REACTOR_ARGS[@]}"
else
  # Containerized execution (primary command logic)
  debug "Running reactor command ..."
  docker run "${REACTOR_ARGS[@]}" "${COMMAND_ARGS[@]}"

  if [ $? -eq 0 ]; then
    # Local execution (use sparingly)
    if function_exists $COMMAND_HOST_FUNCTION; then
      COMMAND_ARGS=( "${COMMAND_ARGS[@]:1}" )

      reactor_args "${COMMAND_ARGS[@]}"
      $COMMAND_HOST_FUNCTION "${COMMAND_ARGS[@]}"
    fi
  fi
fi
