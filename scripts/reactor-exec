#!/usr/bin/env bash
#
# Usage:
#
#  reactor-exec [flags] <command> [args] [flags/options]
#
#=========================================================================================
# Initialization
#

# Initialize top level directories and load bootstrap functions
SCRIPT_PATH="${BASH_SOURCE[0]}" # bash
if [[ -z "$SCRIPT_PATH" ]]; then
  SCRIPT_PATH="${(%):-%N}" # zsh
fi

((return 0 2>/dev/null) || [[ $ZSH_EVAL_CONTEXT =~ :file$ ]]) && SOURCED=1 || SOURCED=0

export __script_dir="$(cd "$(dirname "${SCRIPT_PATH}")" && pwd)"
source "${__script_dir}/reactor-env" $SOURCED

if [[ $SOURCED -eq 1 ]]; then
  # script is being sourced
  return
fi


echo "" >"$(logfile)"
debug "====================================================================="
debug "Executing reactor command: $@"

debug "Environment variables"
debug "======================================"
debug "$(env)"


# Parameter parsing
function usage () {
  cat <<EOF >&2

  Reactor manages development Kubernetes environments

  Usage:

    kubectl reactor [flags] [command] [flags/options]

  Flags:
${__reactor_core_flags}

  Commands:

    enter                 Launch a reactor container session
EOF
  for function_name in $(compgen -A function); do
    if [[ "$function_name" == *"_command" ]]; then
      command_name=${function_name%"_command"}
      command_description="${command_name}_description"

      if function_exists $command_description; then
        printf "    %-20s  %s\n" "$command_name" "$($command_description)" >&2
      fi
    fi
  done
  echo "" >&2
  echo "  Use 'kubectl reactor <command> --help' for more information about a given command" >&2
  echo "" >&2
  exit 1
}

# Argument processing
reactor_args "$@"

#
#=========================================================================================
# Execution
#

if [[ "${arg_h:-0}" = "1" ]] || [[ ${#COMMAND_ARGS[@]} -eq 0 ]]; then
  usage
else
  COMMAND="${COMMAND_ARGS[0]}"
  COMMAND_ARGS=("${COMMAND_ARGS[@]:1}")
  COMMAND_FUNCTION="${COMMAND}_command"

  if [ "$COMMAND" == "help" ]; then
    if ! [[ ${#COMMAND_ARGS[@]} -gt 0 ]]; then
      usage
    else
      HELP_COMMAND="${COMMAND_ARGS[0]}_command"

      if function_exists $HELP_COMMAND; then
        $HELP_COMMAND --help
      else
        error "Unknown command: ${HELP_COMMAND}"
        usage
      fi
    fi
  elif function_exists $COMMAND_FUNCTION; then
    COMMAND_INIT_FUNCTION="${COMMAND_FUNCTION}_init"
    COMMAND_EXIT_FUNCTION="${COMMAND_FUNCTION}_exit"

    if function_exists $COMMAND_INIT_FUNCTION; then
      $COMMAND_INIT_FUNCTION "${COMMAND_ARGS[@]:-}"
    fi

    $COMMAND_FUNCTION "${COMMAND_ARGS[@]:-}"

    if function_exists $COMMAND_EXIT_FUNCTION; then
      $COMMAND_EXIT_FUNCTION "${COMMAND_ARGS[@]:-}"
    fi
  else
    error "Unknown command: ${COMMAND}"
    usage
  fi
fi

source "${__script_dir}/state/finalize.sh"
