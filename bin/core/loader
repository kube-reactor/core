#!/usr/bin/env bash
#
# Usage:
#
#  source "${__bin_dir}/core/loader"
#
#  > Requires: ${__bin_dir}
#
#=========================================================================================
# Initialization
#
# Error handling
set -o errtrace
set -o nounset
set -o pipefail

shopt -s globstar


function init_core () {
  export __environment="${REACTOR_ENVIRONMENT:-local}"

  export __reactor_dir="$(dirname "$1")"
  export __bin_dir="${__reactor_dir}/bin"

  export __core_dir="${__bin_dir}/core"
  export __core_lib_dir="${__core_dir}/lib"

  export __commands_dir="${__bin_dir}/commands"
  export __utilities_dir="${__bin_dir}/utilities"
  export __test_dir="${__reactor_dir}/tests"
  export __test_lib_dir="${__test_dir}/lib"
  export __templates_dir="${__reactor_dir}/templates"
  export __projects_dir="${__reactor_dir}/projects"

  export __reactor_version="$(cat -s "${__reactor_dir}/VERSION")"
  export __reactor_command_functions=(
    command
    host_command
  )
  source "${__core_lib_dir}/bootstrap.sh"
}

function init_template () {
  export __template_dir="$(dirname "$1")"
}

function init_project() {
  export __project_dir="$(dirname "$1")"
  export __env_dir="${__project_dir}/env/${__environment}"
  export __init_file="${__env_dir}/.initialized"

  export __project_reactor_dir="${__project_dir}/reactor"
  export __project_utilities_dir="${__project_reactor_dir}/utilities"
  export __project_test_dir="${__project_reactor_dir}/tests"

  export __app_dir="${__project_dir}/projects"
  export __certs_dir="${__project_dir}/certs"
  export __cache_dir="${__project_dir}/cache"

  export __docker_dir="${__project_dir}/docker"
  export __charts_dir="${__project_dir}/charts"
  export __extension_dir="${__project_dir}/extensions"

  export __terraform_dir="${__project_dir}/terraform"
  export __argocd_apps_dir="${__terraform_dir}/argocd-apps"

  export __project_name="$(config short_name)"

  # Load environment configuration
  if [ -f "${__env_dir}/public.sh" ]; then
    source "${__env_dir}/public.sh"
  fi
  if [ -f "${__env_dir}/secret.sh" ]; then
    source "${__env_dir}/secret.sh"
  fi

  export APP_NAME="${__project_name}"
  export APP_LABEL="$(config name)"

  export PRIMARY_DOMAIN="$(echo "$APP_NAME" | tr '_' '-').local"
}


export INITIALIZED=""
export LOG_LEVEL="${LOG_LEVEL:-6}" # 7 = debug -> 0 = emergency

if [ -f /REACTOR.txt ]; then
  REACTOR_LOCAL=0
else
  REACTOR_LOCAL=1
fi
export REACTOR_LOCAL

# Set OS and system architecture variables.
case "$OSTYPE" in
  darwin*) __os="darwin" ;;
  linux*) __os="linux" ;;
  *) render "Unsupported OS: $OSTYPE"; exit 1 ;;
esac
export __os

case $(uname -m) in
    x86_64 | amd64) __architecture="amd64" ;;
    aarch64 | arm64) __architecture="arm64" ;;
    *) render "Unsupported CPU architecture: $(uname -m)"; exit 1 ;;
esac
export __architecture

export __user_id="$(id -u)"
export __user_name="$(id -nu)"
export __group_id="$(id -g)"
export __group_name="$(id -ng)"
export __docker_group_id="$(cut -d: -f3 < <(getent group docker))"

if [ "${HOME:-}" ]; then
  export __home_dir="$HOME"
else
  export __home_dir="/home/${__user_name}"
  export HOME="${__home_dir}"
fi

if [ -z "${HOME_SHARES:-}" ]; then
  export HOME_SHARES=(
    ".bashrc"
    ".bash_profile"
    ".profile"
    ".ssh"
    ".git"
  )
fi

export DEFAULT_PROJECT_URL="${DEFAULT_REACTOR_URL:-https://github.com/kube-reactor/cluster-base.git}"
export DEFAULT_PROJECT_REMOTE="${DEFAULT_REACTOR_REMOTE:-origin}"
export DEFAULT_PROJECT_REFERENCE="${DEFAULT_REACTOR_REFERENCE:-main}"

init_core "${__bin_dir}"

export __core_manifest="$(core_manifest "$(pwd)")"
export __template_manifest="$(template_manifest "$(pwd)")"
export __project_manifest="$(project_manifest "$(pwd)")"
export __project_name="${REACTOR_PROJECT_NAME:-$(date +%Y%m%d_%H%M%S)}"

#
# Core Development Mode
#
if [ "${__core_manifest}" ]; then
  init_core "${__core_manifest}"
  if [ -d "${__projects_dir}/${__project_name}" ]; then
    export __project_manifest="$(project_manifest "${__projects_dir}/${__project_name}")"
  fi
fi

#
# Template Development Mode
#
if [ "${__template_manifest}" ]; then
  init_template "${__template_manifest}"
  if [ -d "${__template_dir}/${__project_name}" ]; then
    export __project_manifest="$(project_manifest "${__template_dir}/${__project_name}")"
  fi
fi

#
# Project Development Mode
#
if [ "${__project_manifest}" ]; then
  init_project "${__project_manifest}"
fi


function set_initialized () {
  export INITIALIZED="1"
}

function is_initialized () {
  if [ "$INITIALIZED" ]; then
    return 0
  else
    return 1
  fi
}


function check_core () {
  if [ ! "${__core_manifest}" ]; then
    return 1
  else
    return 0
  fi
}

function check_template () {
  if [ ! "${__template_manifest}" ]; then
    return 1
  else
    return 0
  fi
}

function check_project () {
  if [ ! "${__project_manifest}" ]; then
    return 1
  else
    return 0
  fi
}

function requires_project () {
  local command="$1"
  local check_function="${command}_requires_project"

  if [[ "$command" =~ ^- ]]; then
    # No valid command specifed so pass back to parent as normal
    return 0
  fi

  if function_exists "$check_function"; then
    # Farm it off to a command level processor (create and test ...)
    "$check_function"
    return $?
  else
    # All commands by default run in containers before host execution
    return 0
  fi
}

function warn_no_project () {
  local command="${1:--}"

  if ! check_project && requires_project "$command"; then
    # Display error message (no project)
    add_space
    error "Project directory with a 'reactor.yml' file does not exist in current or parent directories"
    add_space
fi
}


function get_run_mode () {
  local current_directory="$(pwd)"

  if [ -f "${current_directory}/reactor.template.yaml" ]; then
    echo "core"
  elif check_project; then
    echo "project"
  elif [ -f "${current_directory}/cookiecutter.json" ]; then
    echo "template"
  else
    emergency "Reactor run mode not supported (needs core, template, or project)"
  fi
}

function core_run_mode () {
  if [ "$(get_run_mode)" == "core" ]; then
    return 0
  else
    return 1
  fi
}

function template_run_mode () {
  if [ "$(get_run_mode)" == "template" ]; then
    return 0
  else
    return 1
  fi
}

function project_run_mode () {
  if [ "$(get_run_mode)" == "project" ]; then
    return 0
  else
    return 1
  fi
}


function init_loader () {
  source "${__utilities_dir}/env.sh"
  source "${__utilities_dir}/hooks.sh"

  export CORE_INDEX=()
  export COMMAND_INDEX=()
  export UTILITY_INDEX=()

  load_utilities cli
}

function load_hook () {
  local lib_name="$1"
  if [[ ! " ${CORE_INDEX[*]} " =~ [[:space:]]${lib_name}[[:space:]] ]]; then
    local lib_script="${__core_lib_dir}/${lib_name}.sh"
    if [ -f "$lib_script" ]; then
      source "$lib_script"
    fi
    source_hook "$lib_name"
    export CORE_INDEX=("${CORE_INDEX[@]}" "$lib_name")
  fi
}

function load_utility () {
  local utility_name="$1"
  if [[ ! " ${UTILITY_INDEX[*]} " =~ [[:space:]]${utility_name}[[:space:]] ]]; then
    source_utility "$utility_name"
    export UTILITY_INDEX=("${UTILITY_INDEX[@]}" "$utility_name")
  fi
}

function load_command () {
  local command_name="$1"
  if [[ ! " ${COMMAND_INDEX[*]} " =~ [[:space:]]${command_name}[[:space:]] ]]; then
    source "${__commands_dir}/${command_name}.sh"
    export COMMAND_INDEX=("${COMMAND_INDEX[@]}" "$command_name")
  fi
}

function load_commands () {
  if [ $# -gt 0 ]; then
    for command in $@; do
      load_command "$command"
    done
  else
    load_library commands
    run_hook initialize_commands
  fi
}

function load_utilities () {
  if [ $# -gt 0 ]; then
    for library in $@; do
      load_utility "$library"
    done
  else
    load_library utilities
    run_hook initialize_utilities
  fi
}


function parse_cli () {
  local param_function="$1"
  shift

  load_utilities help
  set_initialized
  reactor_args "$@"

  "$param_function"

  if [ "$arg_h" ]; then
    generic_usage "${HELP:-}"
  else
    render_overview
  fi
}

# Initialize the command and utility file indexes
init_loader
