#!/usr/bin/env bash
#
# Usage:
#
#  source reactor-env $SOURCED
#
#  > Requires: ${__script_dir}
#  > Optional: $SOURCED => [ 1, 0 ]
#
#=========================================================================================
# Initialization
#
export SOURCED=${1:-0}

export __user_id="$(id -u)"
export __user_name="$(id -nu)"
export __group_id="$(id -g)"
export __group_name="$(id -ng)"
export __docker_group_id="$(cut -d: -f3 < <(getent group docker))"
export __home_dir="/home/${__user_name}"

export __reactor_dir="$(dirname "${__script_dir}")"
export __reactor_version="$(cat -s "${__reactor_dir}/VERSION")"
export __log_file="reactor"

source "${__script_dir}/state/bootstrap.sh"

export __project_file="$(project_file "$(pwd)")"
export __project_dir="$(dirname "${__project_file}")"
export __environment="${REACTOR_ENV:-local}"
export __env_dir="${__project_dir}/env/${__environment}"
export __init_file="${__env_dir}/.initialized"

export __color_debug="\\x1b[1;35m"
export __color_info="\\x1b[1;32m"
export __color_notice="\\x1b[1;34m"
export __color_warning="\\x1b[1;33m"
export __color_error="\\x1b[1;31m"
export __color_critical="\\x1b[1;31m"
export __color_alert="\\x1b[1;37;41m"
export __color_emergency="\\x1b[1;4;5;37;41m"
export __color_variable="\\x1b[1;32m"
export __color_key="\\x1b[1;33m"
export __color_value="\\x1b[1;34m"
export __color_terminal="\\x1b[1;32;40m"
export __color_reset="\\x1b[0m"

if [ -f /REACTOR.txt ]; then
  REACTOR_LOCAL=0
else
  REACTOR_LOCAL=1
fi
export REACTOR_LOCAL
export ARGOCD_APPS_VERSION="main"

# Load environment configuration
if [ -f "${__env_dir}/public.sh" ]; then
  source "${__env_dir}/public.sh"
fi
if [ -f "${__env_dir}/secret.sh" ]; then
  source "${__env_dir}/secret.sh"
fi

HOOK_UTILITIES="${__script_dir}/utilities/hooks.sh"
source "$HOOK_UTILITIES"

CLI_UTILITIES="${__script_dir}/utilities/cli.sh"
source "$CLI_UTILITIES"

DISK_UTILITIES="${__script_dir}/utilities/disk.sh"
source "$DISK_UTILITIES"

source "${__script_dir}/state/initialize.sh"

for file in "${__script_dir}/utilities"/*.sh; do
  if [[ "$file" != "$HOOK_UTILITIES" ]] \
    && [[ "$file" != "$CLI_UTILITIES" ]] \
    && [[ "$file" != "$DISK_UTILITIES" ]]; then
    source "$file"
  fi
done

# Initialize Docker registry
if [[ $REACTOR_LOCAL -eq 0 ]] || [[ $SOURCED -eq 1 ]]; then
  if kubernetes_status; then
    add_docker_environment
  fi
fi
load_library utilities
run_hook initialize_utilities

for file in "${__script_dir}/commands"/*.sh; do
  source "$file"
done
load_library commands
run_hook initialize_commands
