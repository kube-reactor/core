#!/usr/bin/env bash
#
# Usage:
#
#  reactor [flags] <command> [args] [flags/options]
#
#=========================================================================================
# Initialization
#
# Initialize top level directories and load bootstrap functions
SCRIPT_PATH="${BASH_SOURCE[0]}" # bash
if [[ -z "$SCRIPT_PATH" ]]; then
  SCRIPT_PATH="${(%):-%N}" # zsh
fi

((return 0 2>/dev/null) || [[ $ZSH_EVAL_CONTEXT =~ :file$ ]]) && SOURCED=1 || SOURCED=0

export __script_name="${__script_name:-$(basename "${SCRIPT_PATH//-/ }")}"
export __command_name="$1"
export __bin_dir="$(cd "$(dirname "${SCRIPT_PATH}")" && pwd)"
source "${__bin_dir}/core/env" $SOURCED

if [ $SOURCED -eq 1 ]; then
  # script is being sourced
  return
fi
reactor_args "$@"
delete_docker_environment

export __init_args=("${__app_args[@]}")

#
#=========================================================================================
# Execution
#

# Log check
[[ "${LOG_LEVEL:-6}" ]] || emergency "Cannot continue without LOG_LEVEL"

# Debug mode
if [ "$arg_d" ]; then
  #set -o xtrace
  PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
  LOG_LEVEL="7"
  # Enable error backtracing
  trap '__err_report "${FUNCNAME:-.}" ${LINENO}' ERR
fi

# Verbose mode
if [ "$arg_v" ]; then
  set -o verbose
fi

# Display help
if [ ${#__app_args[@]} -eq 0 ]; then
  arg_h="1"
fi

warn_no_project "${__command_name}"

if [[ "$arg_h" ]] || [[ "${__command_name}" == "help" ]]; then
  run_local
elif ! requires_project "${__command_name}"; then
  # Local execution (use sparingly)
  run_local
elif ! check_project; then
  debug "Exiting due to no project and no help option specified"
  exit 1
else
  run_docker
fi

if [ $? -eq 0 ]; then
  # Local execution (use sparingly)
  COMMAND_ARGS=("${__init_args[@]:1}")

  reactor_args "${COMMAND_ARGS[@]}"
  run_command "${__command_name}" host_command "${COMMAND_ARGS[@]}"
fi

run_hook finalize
